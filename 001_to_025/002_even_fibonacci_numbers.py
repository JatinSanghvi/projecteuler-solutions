"""
Even Fibonacci numbers

Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
even-valued terms.
"""


def sum_of_even_fibonacci_numbers(limit):
    # f(n) = f(n-1) + f(n-2)
    #      = 2f(n-2) + f(n-3)
    #      = 3f(n-3) + 2f(n-4)
    #      = 4f(n-3) + f(n-4) - f(n-5)
    #      = 4f(n-3) + f(n-6)

    sum_fn = 0
    (fn, fn_3, fn_6) = (0, 0, 2)

    while fn < limit:
        sum_fn += fn
        fn = 4 * fn_3 + fn_6
        (fn_3, fn_6) = (fn, fn_3)

    return sum_fn

print sum_of_even_fibonacci_numbers(34)  # test 1
print sum_of_even_fibonacci_numbers(35)  # test 2
print sum_of_even_fibonacci_numbers(4000000)  # solution
