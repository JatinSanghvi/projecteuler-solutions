"""
Highly divisible triangular number

Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


def divisors(num):
    num_divisors = 1
    initial_num = num
    i = 2
    while i * i <= initial_num:
        power = 0
        while num % i == 0:
            num /= i
            power += 1

        num_divisors *= power + 1
        i += 1

    # Following condition will happen when largest prime factor is greater than square-root of number.
    if num > 1:
        num_divisors *= 2

    return num_divisors


def triangular_number(in_divisors):
    # If n = p1^e1 * p2^e2 * ... * pk^ek, where each p is a prime number, then the number of factors of n is
    # (e1 + 1)*(e2 + 1)* ... *(ek + 1). The formula will hold for this function, as adjacent numbers do not have
    # common factors.

    # First triangular number and divisors of its two factors, (n and (n+1)/2) or (n/2 and n+1).
    num = 1
    (odd_divisors, even_divisors) = (divisors(num), 0)
    curr_divisors = 0

    while curr_divisors <= in_divisors:
        num += 1
        if num % 2 == 1:
            even_divisors = divisors((num + 1) / 2)
        else:
            odd_divisors = divisors(num + 1)

        curr_divisors = odd_divisors * even_divisors

    return num * (num + 1) / 2

print triangular_number(5)  # test
print triangular_number(500)  # solution
